Para criar o package.json, dar um npm init -y

pacotes:
npm i 
bcryptjs: biblioteca de manipulação de senhas p/ autenticação
cors: receber requisições da mesma origem (localhost)
dotenv: vaiáveis de ambiente (dominio de BD, porta de produção, porta de dev, etc)
express: framework backend p/ criar a API
express-validator: trabalha entre as requisições pra validar os dados
jsonwebtoken: gera e verifica os tokens de autenticação
mongoose: ferramenta pro MongoDB
multer: upload de imagens

nodemon:
usado para simular um servidor local e dar autoreload.
Sempre que tiver alguma mudança no back, ele recarrega o código pra deixar tudo atualizado
npm i --save-dev nodemon
Utiliza-se a flag --save-dev para dizer que é algo exclusivamente do ambiente de dev. dessa forma, quando fizer o deploy ele não vai

no package.json:
criar dentro de scripts "server": "nodemon ./app.js"

na pasta routes, costuma-se criar um arquivo geral e um com as rotas de cada model

para rodar o server, entrar na pasta backend antes de dar o npm run server (caso contrário, ele não acha o package.json)

pasta middlewares:
serve para evitar fazer as mesmas validações várias e várias vezes. 
Por exemplo, no cadastro - se nome não chegou, se email não chegou... Isso pode ser repetido em outras partes do código
Os middlewares são como "algo que ocorre entre a requisição e o acesso da rota"